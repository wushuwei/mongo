package utilities

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"

	"encoding/json"
	"net/http"
)

func ConnetMongo() {
	localConnectStr := "mongodb://localhost:27017/?readPreference=primary&ssl=false"
	client, err := mongo.NewClient(options.Client().ApplyURI(
		// remoteConnectStr,
		localConnectStr,
	))
	if err != nil {
		log.Fatal(err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	err = client.Connect(ctx)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Disconnect(ctx)

	err = client.Ping(ctx, readpref.Primary())
	if err != nil {
		log.Fatal(err)
	}

	databases, err := client.ListDatabaseNames(ctx, bson.M{})
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(databases)

	db := client.Database("local")
	collection := db.Collection("startup_log")
	cursor, err := collection.Find(ctx, bson.M{"_id": "ubuntu-1615493216307"})
	if err != nil {
		log.Fatal(err)
	}
	defer cursor.Close(ctx)
	for cursor.Next(ctx) {
		var row bson.M
		if err = cursor.Decode(&row); err != nil {
			log.Fatal(err)
		}
		fmt.Println(row["hostname"], " : ", row["cmdLine"])
		fmt.Println("---------------------")
		break
	}
}

func Double(a int) int {
	return a * 2
}

func ConnetFinnhub() {

	client := http.Client{}
	// patternRecognition := "https://finnhub.io/api/v1/scan/pattern?symbol=TSLA&resolution=D&token=c17bkh748v6se55vr9eg"
	signalRecommand := "https://finnhub.io/api/v1/stock/recommendation?symbol=TSLA&token=c17bkh748v6se55vr9eg"

	//https://mholt.github.io/json-to-go/
	type Autogenerated_Signal []struct {
		Buy        int    `json:"buy"`
		Hold       int    `json:"hold"`
		Period     string `json:"period"`
		// Period     time.Time	
		Sell       int    `json:"sell"`
		Strongbuy  int    `json:"strongBuy"`
		Strongsell int    `json:"strongSell"`
		Symbol     string `json:"symbol"`
	}

	request, err := http.NewRequest("GET", signalRecommand, nil)
	if err != nil {
		fmt.Println(err)
	}

	resp, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
	}

	// var result map[string]Autogenerated
	var result Autogenerated_Signal

	json.NewDecoder(resp.Body).Decode(&result)
	// fmt.Println(result)

	servalDaysAgo := time.Now().AddDate(0, 0, -16)

	for _, v := range result {
		asDate, _ := time.Parse("2006-01-02", v.Period)
		if asDate.After(servalDaysAgo){
			fmt.Println("Symbol:", v.Symbol, " buy: ", v.Buy, " period: ", v.Period, 
			" as Date: ", asDate)
	
		}
	}


}
